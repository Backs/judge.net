// <auto-generated />
using System;
using Judge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Judge.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250330095953_contest_analysis")]
    partial class contest_analysis
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Judge.Model.CheckSolution.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("bit");

                    b.Property<int>("MemoryLimitBytes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestsFolder")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("TimeLimitMilliseconds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("Judge.Model.Contests.Contest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Analysis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CheckPointTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FreezeTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("OneLanguagePerTask")
                        .HasColumnType("bit");

                    b.Property<int>("Rules")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Contests", (string)null);
                });

            modelBuilder.Entity("Judge.Model.Contests.ContestTask", b =>
                {
                    b.Property<int>("ContestId")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.HasKey("ContestId", "TaskName");

                    b.HasIndex("TaskId");

                    b.ToTable("ContestTasks", (string)null);
                });

            modelBuilder.Entity("Judge.Model.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoDetectFileName")
                        .HasColumnType("bit");

                    b.Property<string>("CompilerOptionsTemplate")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("CompilerPath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("DefaultFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsCompilable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OutputFileTemplate")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("RunStringFormat")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("Judge.Model.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Judge.Model.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Judge.Model.SubmitSolution.CheckQueue", b =>
                {
                    b.Property<long>("SubmitResultId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("SubmitResultId");

                    b.ToTable("CheckQueue", "dbo");
                });

            modelBuilder.Entity("Judge.Model.SubmitSolution.SubmitBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<long>("ProblemId")
                        .HasColumnType("bigint");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("SourceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmitDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<byte>("SubmitType")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserHost")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.HasIndex("UserId");

                    b.ToTable("Submits", "dbo");

                    b.HasDiscriminator<byte>("SubmitType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Judge.Model.SubmitSolution.SubmitResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CompileOutput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PassedTests")
                        .HasColumnType("int");

                    b.Property<string>("RunDescription")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RunOutput")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("SubmitId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalBytes")
                        .HasColumnType("int");

                    b.Property<int?>("TotalMilliseconds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubmitId");

                    b.ToTable("SubmitResults", "dbo");
                });

            modelBuilder.Entity("Judge.Model.SubmitSolution.ContestTaskSubmit", b =>
                {
                    b.HasBaseType("Judge.Model.SubmitSolution.SubmitBase");

                    b.Property<int>("ContestId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue((byte)2);
                });

            modelBuilder.Entity("Judge.Model.SubmitSolution.ProblemSubmit", b =>
                {
                    b.HasBaseType("Judge.Model.SubmitSolution.SubmitBase");

                    b.HasDiscriminator().HasValue((byte)1);
                });

            modelBuilder.Entity("Judge.Model.Contests.ContestTask", b =>
                {
                    b.HasOne("Judge.Model.Contests.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Judge.Model.CheckSolution.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Judge.Model.Entities.UserRole", b =>
                {
                    b.HasOne("Judge.Model.Entities.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Judge.Model.SubmitSolution.CheckQueue", b =>
                {
                    b.HasOne("Judge.Model.SubmitSolution.SubmitResult", null)
                        .WithOne("CheckQueue")
                        .HasForeignKey("Judge.Model.SubmitSolution.CheckQueue", "SubmitResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Judge.Model.SubmitSolution.SubmitBase", b =>
                {
                    b.HasOne("Judge.Model.CheckSolution.Task", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Judge.Model.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Judge.Model.SubmitSolution.SubmitResult", b =>
                {
                    b.HasOne("Judge.Model.SubmitSolution.SubmitBase", "Submit")
                        .WithMany("Results")
                        .HasForeignKey("SubmitId");

                    b.Navigation("Submit");
                });

            modelBuilder.Entity("Judge.Model.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Judge.Model.SubmitSolution.SubmitBase", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Judge.Model.SubmitSolution.SubmitResult", b =>
                {
                    b.Navigation("CheckQueue");
                });
#pragma warning restore 612, 618
        }
    }
}
